{"version":3,"sources":["molecules/CountDownTimer.js","molecules/CorrectAnswerCounter.js","atoms/GuideMessage.js","organisms/GameGuide.js","atoms/AnswerButton.js","atoms/AnswerGuide.js","molecules/AnswerBlock.js","organisms/SelectAnswerBlock.js","atoms/DifficultyButton.js","constants/Diffculty.js","organisms/SelectDifficultyModal.js","atoms/SecondaryButton.js","organisms/CompleteModal.js","pages/Game.js","constants/Operator.js","App.js","serviceWorker.js","index.js"],"names":["countDownTimer","countDowntime","Box","m","fontSize","Timer","style","paddingRight","CorrectAnswerCounter","correctAnswerCount","PanoramaFishEye","GuideMessage","answerDisplay","lastAnswerCorrect","Typography","GameGuide","display","CountDownTimer","AnswerButton","index","formula","onClickAction","answerButtonColor","orange","red","green","indigo","Button","variant","width","process","color","backgroundColor","onClick","AnswerGuide","calcResult","abs","correctAnswerIndex","align","AnswerBlock","handleAnswerAction","height","SelectAnswerBlock","buttonFormulaData","map","data","p","key","DifficultyButton","difficulty","SelectDifficultyModal","open","handleSelectDifficultyAction","Modal","aria-labelledby","aria-describedby","closeAfterTransition","justifyContent","alignItems","Fade","in","bgcolor","boxShadow","flexDirection","id","PrimaryButton","text","CompleteModal","diffculty","handleRestartAction","TwitterShareButton","url","title","hashtags","TwitterIcon","size","borderRadius","SecondaryButton","GameTemplate","useState","updateCountDownTime","timerId","setTimerId","setDiffculty","partsCount","setPartsCount","setButtonFormulaData","setCorrectAnswerIndex","answerCount","updateAnswerCount","updateCorrectAnswerCount","difficultyModalOpen","updateDifficultyModalOpen","updateAnswerDisplay","updateLastAnswerCorrect","completeModalOpen","updateCompleteModalOpen","getRandomInt","count","initNum","Math","floor","random","getFormulaData","addPartsCount","num","String","parts","operator","console","log","isDuplicationAbs","formulaDataList","absList","Array","from","Set","length","initialFormulaData","push","originalIndex","sort","a","b","initialCorrectAnswerIndex","useEffect","clearInterval","Container","maxWidth","my","checkAnswer","setTimeout","selectDiffculty","initialDiffcultySetting","setInterval","time","App","Game","Boolean","window","location","hostname","match","rootElement","document","getElementById","hasChildNodes","hydrate","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b4a9a2d3.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Box } from '@material-ui/core';\nimport { Timer as TimerIcon } from '@material-ui/icons';\n\nconst countDownTimer = ({ countDowntime }) => {\n  return (\n    <Box m={2} fontSize=\"1.8rem\">\n      <TimerIcon style={{ paddingRight: '5px' }} />\n      <>{countDowntime}</>\n    </Box>\n  );\n};\n\ncountDownTimer.propTypes = {\n  countDowntime: PropTypes.number.isRequired,\n};\n\nexport default countDownTimer;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Box } from '@material-ui/core';\nimport { PanoramaFishEye as PanoramaFishEyeIcon } from '@material-ui/icons';\n\nconst CorrectAnswerCounter = ({ correctAnswerCount }) => {\n  return (\n    <Box m={2} fontSize=\"1.8rem\">\n      <PanoramaFishEyeIcon />\n      <>{`：${correctAnswerCount}`}</>\n    </Box>\n  );\n};\n\nCorrectAnswerCounter.propTypes = {\n  correctAnswerCount: PropTypes.number.isRequired,\n};\n\nexport default CorrectAnswerCounter;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Typography } from '@material-ui/core';\n\nconst GuideMessage = ({ answerDisplay, lastAnswerCorrect }) => {\n  return (\n    <Typography>\n      {answerDisplay && lastAnswerCorrect && '正解！'}\n      {answerDisplay && !lastAnswerCorrect && '不正解...'}\n      {!answerDisplay && '一番「2」に近い式はどれかな？'}\n    </Typography>\n  );\n};\n\nGuideMessage.propTypes = {\n  answerDisplay: PropTypes.bool.isRequired,\n  lastAnswerCorrect: PropTypes.bool.isRequired,\n};\n\nexport default GuideMessage;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Box } from '@material-ui/core';\nimport CountDownTimer from '../molecules/CountDownTimer';\nimport CorrectAnswerCounter from '../molecules/CorrectAnswerCounter';\nimport GuideMessage from '../atoms/GuideMessage';\n\nconst GameGuide = ({\n  countDowntime,\n  correctAnswerCount,\n  answerDisplay,\n  lastAnswerCorrect,\n}) => {\n  return (\n    <>\n      <Box display=\"flex\">\n        <CountDownTimer countDowntime={countDowntime} />\n        <CorrectAnswerCounter correctAnswerCount={correctAnswerCount} />\n      </Box>\n      <GuideMessage\n        answerDisplay={answerDisplay}\n        lastAnswerCorrect={lastAnswerCorrect}\n      />\n    </>\n  );\n};\n\nGameGuide.propTypes = {\n  countDowntime: PropTypes.number.isRequired,\n  correctAnswerCount: PropTypes.number.isRequired,\n  answerDisplay: PropTypes.bool.isRequired,\n  lastAnswerCorrect: PropTypes.bool.isRequired,\n};\n\nexport default GameGuide;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from '@material-ui/core';\nimport orange from '@material-ui/core/colors/orange';\nimport red from '@material-ui/core/colors/red';\nimport green from '@material-ui/core/colors/green';\nimport indigo from '@material-ui/core/colors/indigo';\n\nconst AnswerButton = ({ index, formula, onClickAction }) => {\n  const answerButtonColor = [orange[800], red[500], green[600], indigo[500]];\n  return (\n    <Button\n      variant=\"contained\"\n      style={{\n        width: process.env.REACT_APP_BUTTON_WIDTH,\n        color: 'white',\n        backgroundColor: answerButtonColor[index],\n      }}\n      onClick={() => onClickAction(index)}\n    >\n      {formula}\n    </Button>\n  );\n};\n\nAnswerButton.propTypes = {\n  index: PropTypes.number.isRequired,\n  formula: PropTypes.string.isRequired,\n  onClickAction: PropTypes.func.isRequired,\n};\n\nexport default AnswerButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Typography } from '@material-ui/core';\n\nconst AnswerGuide = ({ index, calcResult, abs, correctAnswerIndex }) => {\n  return (\n    <Typography align=\"center\">\n      {`${calcResult} → 2まで${abs} ${\n        index === correctAnswerIndex ? '〇' : '×'\n      }`}\n    </Typography>\n  );\n};\n\nAnswerGuide.propTypes = {\n  index: PropTypes.number.isRequired,\n  calcResult: PropTypes.number.isRequired,\n  abs: PropTypes.number.isRequired,\n  correctAnswerIndex: PropTypes.number.isRequired,\n};\n\nexport default AnswerGuide;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Box } from '@material-ui/core';\nimport AnswerButton from '../atoms/AnswerButton';\nimport AnswerGuide from '../atoms/AnswerGuide';\n\nconst AnswerBlock = ({\n  index,\n  calcResult,\n  formula,\n  abs,\n  answerDisplay,\n  correctAnswerIndex,\n  handleAnswerAction,\n}) => {\n  return (\n    <>\n      <AnswerButton\n        index={index}\n        formula={formula}\n        onClickAction={handleAnswerAction}\n      />\n      <Box height={20}>\n        {answerDisplay && (\n          <AnswerGuide\n            index={index}\n            calcResult={calcResult}\n            abs={abs}\n            correctAnswerIndex={correctAnswerIndex}\n          />\n        )}\n      </Box>\n    </>\n  );\n};\n\nAnswerBlock.propTypes = {\n  index: PropTypes.number.isRequired,\n  calcResult: PropTypes.number.isRequired,\n  formula: PropTypes.string.isRequired,\n  abs: PropTypes.number.isRequired,\n  answerDisplay: PropTypes.bool.isRequired,\n  correctAnswerIndex: PropTypes.number.isRequired,\n  handleAnswerAction: PropTypes.func.isRequired,\n};\n\nexport default AnswerBlock;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Box } from '@material-ui/core';\nimport AnswerBlock from '../molecules/AnswerBlock';\n\nconst SelectAnswerBlock = ({\n  buttonFormulaData,\n  answerDisplay,\n  correctAnswerIndex,\n  handleAnswerAction,\n}) => {\n  return buttonFormulaData.map((data, index) => {\n    return (\n      <Box p={2} key={data.formula}>\n        <AnswerBlock\n          index={index}\n          calcResult={data.calcResult}\n          formula={data.formula}\n          abs={data.abs}\n          answerDisplay={answerDisplay}\n          correctAnswerIndex={correctAnswerIndex}\n          handleAnswerAction={handleAnswerAction}\n        />\n      </Box>\n    );\n  });\n};\n\nSelectAnswerBlock.propTypes = {\n  buttonFormulaData: PropTypes.arrayOf(\n    PropTypes.exact({\n      calcResult: PropTypes.number.isRequired,\n      formula: PropTypes.string.isRequired,\n      abs: PropTypes.number.isRequired,\n    })\n  ),\n  answerDisplay: PropTypes.bool.isRequired,\n  correctAnswerIndex: PropTypes.number.isRequired,\n  handleAnswerAction: PropTypes.func.isRequired,\n};\n\nexport default SelectAnswerBlock;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from '@material-ui/core';\nimport green from '@material-ui/core/colors/green';\nimport * as Diffculty from '../constants/Diffculty';\n\nconst DifficultyButton = ({ difficulty, onClickAction }) => {\n  return (\n    <>\n      {difficulty === Diffculty.EASY && (\n        <Button\n          variant=\"contained\"\n          style={{ color: 'white', backgroundColor: green[600] }}\n          onClick={() => onClickAction(difficulty)}\n        >\n          {`${Diffculty.EASY}（数値${process.env.REACT_APP_EASY_FORMULA_PARTS_COUNT}つ）`}\n        </Button>\n      )}\n      {(difficulty === Diffculty.NORMAL || difficulty === Diffculty.HARD) && (\n        <Button\n          variant=\"contained\"\n          color={difficulty === Diffculty.NORMAL ? 'primary' : 'secondary'}\n          onClick={() => onClickAction(difficulty)}\n        >\n          {difficulty === Diffculty.NORMAL\n            ? `${Diffculty.NORMAL}（数値${process.env.REACT_APP_NORMAL_FORMULA_PARTS_COUNT}つ）`\n            : `${Diffculty.HARD}（数値${process.env.REACT_APP_HARD_FORMULA_PARTS_COUNT}つ）`}\n        </Button>\n      )}\n    </>\n  );\n};\n\nDifficultyButton.propTypes = {\n  difficulty: PropTypes.string.isRequired,\n  onClickAction: PropTypes.func.isRequired,\n};\n\nexport default DifficultyButton;\n","export const EASY = '初級';\n\nexport const NORMAL = '中級';\n\nexport const HARD = '上級';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Box, Fade, Modal } from '@material-ui/core';\nimport * as Diffculty from '../constants/Diffculty';\nimport DifficultyButton from '../atoms/DifficultyButton';\n\nconst SelectDifficultyModal = ({ open, handleSelectDifficultyAction }) => {\n  return (\n    <Modal\n      aria-labelledby=\"transition-modal-title\"\n      aria-describedby=\"transition-modal-description\"\n      open={open}\n      closeAfterTransition\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n    >\n      <Fade in={open}>\n        <Box\n          p={4}\n          width={400}\n          bgcolor=\"background.paper\"\n          boxShadow={3}\n          display=\"flex\"\n          flexDirection=\"column\"\n          alignItems=\"center\"\n        >\n          <h2 id=\"transition-modal-title\">難易度選択</h2>\n          <p id=\"transition-modal-description\">\n            難易度に応じて、式が長くなります\n          </p>\n          <>\n            <Box p={2}>\n              <DifficultyButton\n                difficulty={Diffculty.EASY}\n                onClickAction={handleSelectDifficultyAction}\n              />\n            </Box>\n            <Box p={2}>\n              <DifficultyButton\n                difficulty={Diffculty.NORMAL}\n                onClickAction={handleSelectDifficultyAction}\n              />\n            </Box>\n            <Box p={2}>\n              <DifficultyButton\n                difficulty={Diffculty.HARD}\n                onClickAction={handleSelectDifficultyAction}\n              />\n            </Box>\n          </>\n        </Box>\n      </Fade>\n    </Modal>\n  );\n};\n\nSelectDifficultyModal.propTypes = {\n  open: PropTypes.bool.isRequired,\n  handleSelectDifficultyAction: PropTypes.func.isRequired,\n};\n\nexport default SelectDifficultyModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from '@material-ui/core';\n\nconst PrimaryButton = ({ text, onClickAction }) => {\n  return (\n    <Button onClick={onClickAction} variant=\"contained\" color=\"secondary\">\n      {text}\n    </Button>\n  );\n};\n\nPrimaryButton.propTypes = {\n  text: PropTypes.string.isRequired,\n  onClickAction: PropTypes.func.isRequired,\n};\n\nexport default PrimaryButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Box, Fade, Modal } from '@material-ui/core';\nimport { TwitterShareButton, TwitterIcon } from 'react-share';\nimport SecondaryButton from '../atoms/SecondaryButton';\n\nconst CompleteModal = ({\n  open,\n  diffculty,\n  correctAnswerCount,\n  handleRestartAction,\n}) => {\n  return (\n    <Modal\n      aria-labelledby=\"transition-modal-title\"\n      aria-describedby=\"transition-modal-description\"\n      open={open}\n      closeAfterTransition\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n    >\n      <Fade in={open}>\n        <Box\n          p={4}\n          width={400}\n          bgcolor=\"background.paper\"\n          boxShadow={3}\n          display=\"flex\"\n          flexDirection=\"column\"\n          alignItems=\"center\"\n        >\n          <h2 id=\"transition-modal-title\">{`${diffculty} ${correctAnswerCount}回正解！`}</h2>\n          <p id=\"transition-modal-description\">お疲れさまでしたー</p>\n          <Box p={2}>\n            <TwitterShareButton\n              url=\"https://h-yoshikawa0724.github.io/close-to-2\"\n              title={`${diffculty} - ${correctAnswerCount}回正解！`}\n              hashtags={['close_to_2', 'web1week']}\n            >\n              <TwitterIcon size={40} borderRadius={10} />\n            </TwitterShareButton>\n          </Box>\n          <Box p={2}>\n            <SecondaryButton\n              text=\"再チャレンジ\"\n              onClickAction={handleRestartAction}\n            />\n          </Box>\n        </Box>\n      </Fade>\n    </Modal>\n  );\n};\n\nCompleteModal.propTypes = {\n  open: PropTypes.bool.isRequired,\n  diffculty: PropTypes.string.isRequired,\n  correctAnswerCount: PropTypes.number.isRequired,\n  handleRestartAction: PropTypes.func.isRequired,\n};\n\nexport default CompleteModal;\n","import React, { useState, useEffect } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport * as Operator from '../constants/Operator';\nimport * as Diffculty from '../constants/Diffculty';\nimport GameGuide from '../organisms/GameGuide';\nimport SelectAnswerBlock from '../organisms/SelectAnswerBlock';\nimport SelectDifficultyModal from '../organisms/SelectDifficultyModal';\nimport CompleteModal from '../organisms/CompleteModal';\n\nconst GameTemplate = () => {\n  const [countDowntime, updateCountDownTime] = useState(30);\n  const [timerId, setTimerId] = useState(0);\n  const [diffculty, setDiffculty] = useState(Diffculty.EASY);\n  const [partsCount, setPartsCount] = useState(1);\n  const [buttonFormulaData, setButtonFormulaData] = useState([]);\n  const [correctAnswerIndex, setCorrectAnswerIndex] = useState(-1);\n  const [answerCount, updateAnswerCount] = useState(0);\n  const [correctAnswerCount, updateCorrectAnswerCount] = useState(0);\n  const [difficultyModalOpen, updateDifficultyModalOpen] = useState(true);\n  const [answerDisplay, updateAnswerDisplay] = useState(false);\n  const [lastAnswerCorrect, updateLastAnswerCorrect] = useState(false);\n  const [completeModalOpen, updateCompleteModalOpen] = useState(false);\n\n  const startTimer = () => {\n    setTimerId(\n      setInterval(() => {\n        updateCountDownTime((time) => time - 1);\n      }, 1000)\n    );\n  };\n  const stopTimer = () => {\n    clearInterval(timerId);\n  };\n\n  const getRandomInt = (count, initNum = 0) => {\n    return Math.floor(Math.random() * Math.floor(count) + initNum);\n  };\n\n  const getPartsOfFormula = () => {\n    let operator;\n    if (getRandomInt(100, 1) % 2 === 0) {\n      operator = Operator.PLUS;\n    } else {\n      operator = Operator.MINUS;\n    }\n    const num = getRandomInt(199, -99);\n    const parts = {\n      operator,\n      num,\n    };\n    return parts;\n  };\n\n  const getFormulaData = (addPartsCount) => {\n    let num = getRandomInt(100);\n    let formula = String(num);\n\n    for (let count = 1; count <= addPartsCount; count += 1) {\n      const parts = getPartsOfFormula();\n      if (parts.operator === Operator.PLUS) {\n        num += parts.num;\n        formula += parts.num < 0 ? ` + (${parts.num})` : ` + ${parts.num}`;\n      } else if (parts.operator === Operator.MINUS) {\n        num -= parts.num;\n        formula += parts.num < 0 ? ` - (${parts.num})` : ` - ${parts.num}`;\n      } else {\n        console.log('error');\n      }\n    }\n    const abs = Math.abs(num - 2);\n\n    const formulaData = {\n      calcResult: num,\n      formula,\n      abs,\n    };\n    return formulaData;\n  };\n\n  // 正答が複数存在しうるかチェック\n  const isDuplicationAbs = (formulaDataList) => {\n    const absList = formulaDataList.map((data) => {\n      return data.abs;\n    });\n    return (\n      Array.from(new Set(absList)).length < process.env.REACT_APP_BUTTON_COUNT\n    );\n  };\n\n  const initialCorrectAnswerIndex = (formulaDataList) => {\n    const absList = formulaDataList.map((data, index) => {\n      return {\n        originalIndex: index,\n        abs: data.abs,\n      };\n    });\n    absList.sort((a, b) => {\n      if (a.abs < b.abs) {\n        return -1;\n      }\n      return 1;\n    });\n    setCorrectAnswerIndex(absList[0].originalIndex);\n  };\n\n  const initialFormulaData = () => {\n    const addPartsCount = partsCount - 1;\n    let formulaDataList;\n\n    // 正答が複数存在するパターンの場合は、再度初期化しなおし。\n    do {\n      formulaDataList = [];\n      for (\n        let count = 1;\n        count <= process.env.REACT_APP_BUTTON_COUNT;\n        count += 1\n      ) {\n        formulaDataList.push(getFormulaData(addPartsCount));\n      }\n    } while (isDuplicationAbs(formulaDataList));\n    initialCorrectAnswerIndex(formulaDataList);\n    setButtonFormulaData(formulaDataList);\n  };\n\n  const initialDiffcultySetting = (selectDiffculty) => {\n    setDiffculty(selectDiffculty);\n    switch (selectDiffculty) {\n      case Diffculty.EASY:\n        setPartsCount(process.env.REACT_APP_EASY_FORMULA_PARTS_COUNT);\n        break;\n      case Diffculty.NORMAL:\n        setPartsCount(process.env.REACT_APP_NORMAL_FORMULA_PARTS_COUNT);\n        break;\n      case Diffculty.HARD:\n        setPartsCount(process.env.REACT_APP_HARD_FORMULA_PARTS_COUNT);\n        break;\n      default:\n        console.log('error');\n    }\n  };\n\n  const checkAnswer = (index) => {\n    if (index === correctAnswerIndex) {\n      updateCorrectAnswerCount((count) => count + 1);\n      updateLastAnswerCorrect(true);\n    } else {\n      updateLastAnswerCorrect(false);\n    }\n  };\n\n  useEffect(() => {\n    initialFormulaData();\n    // TODO: react-hooks/exhaustive-depsルールを一時的に無効化\n    // eslint-disable-next-line\n  }, [partsCount, answerCount]);\n\n  useEffect(() => {\n    if (countDowntime === 0) {\n      stopTimer();\n      updateCompleteModalOpen(true);\n    }\n    // TODO: react-hooks/exhaustive-depsルールを一時的に無効化\n    // eslint-disable-next-line\n  }, [countDowntime]);\n\n  const handleSelectDifficultyAction = (selectDiffculty) => {\n    initialDiffcultySetting(selectDiffculty);\n    updateDifficultyModalOpen(false);\n    startTimer();\n  };\n\n  const handleAnswerAction = (index) => {\n    checkAnswer(index);\n    updateAnswerDisplay(true);\n    setTimeout(() => {\n      updateAnswerDisplay(false);\n      updateAnswerCount((count) => count + 1);\n    }, 1200);\n  };\n\n  const handleRestartAction = () => {\n    updateCompleteModalOpen(false);\n    updateCountDownTime(30);\n    updateCorrectAnswerCount(0);\n    updateDifficultyModalOpen(true);\n  };\n\n  return (\n    <>\n      <Container maxWidth=\"sm\">\n        <Box\n          p={4}\n          my={1}\n          boxShadow={3}\n          borderRadius={16}\n          display=\"flex\"\n          flexDirection=\"column\"\n          alignItems=\"center\"\n        >\n          <GameGuide\n            countDowntime={countDowntime}\n            correctAnswerCount={correctAnswerCount}\n            answerDisplay={answerDisplay}\n            lastAnswerCorrect={lastAnswerCorrect}\n          />\n          <SelectAnswerBlock\n            buttonFormulaData={buttonFormulaData}\n            answerDisplay={answerDisplay}\n            correctAnswerIndex={correctAnswerIndex}\n            handleAnswerAction={handleAnswerAction}\n          />\n        </Box>\n      </Container>\n      <SelectDifficultyModal\n        open={difficultyModalOpen}\n        handleSelectDifficultyAction={handleSelectDifficultyAction}\n      />\n      <CompleteModal\n        open={completeModalOpen}\n        diffculty={diffculty}\n        correctAnswerCount={correctAnswerCount}\n        handleRestartAction={handleRestartAction}\n      />\n    </>\n  );\n};\n\nexport default GameTemplate;\n","export const PLUS = 'PLUS';\n\nexport const MINUS = 'MINUS';\n","import React from 'react';\nimport Game from './pages/Game';\n\nconst App = () => {\n  return <Game />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById('root');\nif (rootElement.hasChildNodes()) {\n  hydrate(<App />, rootElement);\n} else {\n  render(<App />, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}