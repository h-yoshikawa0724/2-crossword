{"version":3,"sources":["atoms/DifficultyButton.js","organisms/SelectDifficultyModal.js","atoms/SecondaryButton.js","organisms/CompleteModal.js","App.js","serviceWorker.js","index.js"],"names":["DifficultyButton","difficulty","onClickAction","Button","variant","style","color","backgroundColor","green","onClick","process","SelectDifficultyModal","open","handleSelectDifficultyAction","Modal","aria-labelledby","aria-describedby","closeAfterTransition","display","justifyContent","alignItems","Fade","in","Box","p","width","bgcolor","boxShadow","flexDirection","id","PrimaryButton","text","CompleteModal","diffculty","correctAnswerCount","handleRestartAction","TwitterShareButton","url","title","hashtags","TwitterIcon","size","borderRadius","SecondaryButton","App","answerButtonColor","orange","red","indigo","useState","countDowntime","updateCountDownTime","timerId","setTimerId","setDiffculty","partsCount","setPartsCount","buttonFormulaData","setButtonFormulaData","correctAnswerIndex","setCorrectAnswerIndex","answerCount","updateAnswerCount","updateCorrectAnswerCount","difficultyModalOpen","updateDifficultyModalOpen","displayAnswer","updateDisplayAnswer","lastAnswerCorrect","updateLastAnswerCorrect","completeModalOpen","updateCompleteModalOpen","getRandomInt","count","initNum","Math","floor","random","getFormulaData","addPartsCount","num","formula","String","parts","operator","console","log","abs","isDuplicationAbs","formulaDataList","absList","map","data","Array","from","Set","length","initialFormulaData","push","index","originalIndex","sort","a","b","initialCorrectAnswerIndex","useEffect","clearInterval","handleAnswerAction","checkAnswer","setTimeout","Container","maxWidth","my","m","fontSize","paddingRight","Typography","key","height","align","selectDiffculty","initialDiffcultySetting","setInterval","time","Boolean","window","location","hostname","match","rootElement","document","getElementById","hasChildNodes","hydrate","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bb6deea6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from '@material-ui/core';\nimport green from '@material-ui/core/colors/green';\n\nconst DifficultyButton = ({ difficulty, onClickAction }) => {\n  return (\n    <>\n      {difficulty === '初級' && (\n        <Button\n          variant=\"contained\"\n          style={{ color: 'white', backgroundColor: green[600] }}\n          onClick={() => onClickAction(difficulty)}\n        >\n          {`初級（数値${process.env.REACT_APP_EASY_FORMULA_PARTS_COUNT}つ）`}\n        </Button>\n      )}\n      {(difficulty === '中級' || difficulty === '上級') && (\n        <Button\n          variant=\"contained\"\n          color={difficulty === '中級' ? 'primary' : 'secondary'}\n          onClick={() => onClickAction(difficulty)}\n        >\n          {difficulty === '中級'\n            ? `中級（数値${process.env.REACT_APP_NORMAL_FORMULA_PARTS_COUNT}つ）`\n            : `上級（数値${process.env.REACT_APP_HARD_FORMULA_PARTS_COUNT}つ）`}\n        </Button>\n      )}\n    </>\n  );\n};\n\nDifficultyButton.propTypes = {\n  difficulty: PropTypes.string.isRequired,\n  onClickAction: PropTypes.func.isRequired,\n};\n\nexport default DifficultyButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Box, Fade, Modal } from '@material-ui/core';\nimport DifficultyButton from '../atoms/DifficultyButton';\n\nconst SelectDifficultyModal = ({ open, handleSelectDifficultyAction }) => {\n  return (\n    <Modal\n      aria-labelledby=\"transition-modal-title\"\n      aria-describedby=\"transition-modal-description\"\n      open={open}\n      closeAfterTransition\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n    >\n      <Fade in={open}>\n        <Box\n          p={4}\n          width={400}\n          bgcolor=\"background.paper\"\n          boxShadow={3}\n          display=\"flex\"\n          flexDirection=\"column\"\n          alignItems=\"center\"\n        >\n          <h2 id=\"transition-modal-title\">難易度選択</h2>\n          <p id=\"transition-modal-description\">\n            難易度に応じて、式が長くなります\n          </p>\n          <>\n            <Box p={2}>\n              <DifficultyButton\n                difficulty=\"初級\"\n                onClickAction={handleSelectDifficultyAction}\n              />\n            </Box>\n            <Box p={2}>\n              <DifficultyButton\n                difficulty=\"中級\"\n                onClickAction={handleSelectDifficultyAction}\n              />\n            </Box>\n            <Box p={2}>\n              <DifficultyButton\n                difficulty=\"上級\"\n                onClickAction={handleSelectDifficultyAction}\n              />\n            </Box>\n          </>\n        </Box>\n      </Fade>\n    </Modal>\n  );\n};\n\nSelectDifficultyModal.propTypes = {\n  open: PropTypes.bool.isRequired,\n  handleSelectDifficultyAction: PropTypes.func.isRequired,\n};\n\nexport default SelectDifficultyModal;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from '@material-ui/core';\n\nconst PrimaryButton = ({ text, onClickAction }) => {\n  return (\n    <Button onClick={onClickAction} variant=\"contained\" color=\"secondary\">\n      {text}\n    </Button>\n  );\n};\n\nPrimaryButton.propTypes = {\n  text: PropTypes.string.isRequired,\n  onClickAction: PropTypes.func.isRequired,\n};\n\nexport default PrimaryButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Box, Fade, Modal } from '@material-ui/core';\nimport { TwitterShareButton, TwitterIcon } from 'react-share';\nimport SecondaryButton from '../atoms/SecondaryButton';\n\nconst CompleteModal = ({\n  open,\n  diffculty,\n  correctAnswerCount,\n  handleRestartAction,\n}) => {\n  return (\n    <Modal\n      aria-labelledby=\"transition-modal-title\"\n      aria-describedby=\"transition-modal-description\"\n      open={open}\n      closeAfterTransition\n      style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n      }}\n    >\n      <Fade in={open}>\n        <Box\n          p={4}\n          width={400}\n          bgcolor=\"background.paper\"\n          boxShadow={3}\n          display=\"flex\"\n          flexDirection=\"column\"\n          alignItems=\"center\"\n        >\n          <h2 id=\"transition-modal-title\">{`${diffculty} ${correctAnswerCount}回正解！`}</h2>\n          <p id=\"transition-modal-description\">お疲れさまでしたー</p>\n          <Box p={2}>\n            <TwitterShareButton\n              url=\"https://h-yoshikawa0724.github.io/close-to-2\"\n              title={`${diffculty} - ${correctAnswerCount}回正解！`}\n              hashtags={['close_to_2', 'web1week']}\n            >\n              <TwitterIcon size={40} borderRadius={10} />\n            </TwitterShareButton>\n          </Box>\n          <Box p={2}>\n            <SecondaryButton\n              text=\"再チャレンジ\"\n              onClickAction={handleRestartAction}\n            />\n          </Box>\n        </Box>\n      </Fade>\n    </Modal>\n  );\n};\n\nCompleteModal.propTypes = {\n  open: PropTypes.bool.isRequired,\n  diffculty: PropTypes.string.isRequired,\n  correctAnswerCount: PropTypes.number.isRequired,\n  handleRestartAction: PropTypes.func.isRequired,\n};\n\nexport default CompleteModal;\n","import React, { useState, useEffect } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Box from '@material-ui/core/Box';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport TimerIcon from '@material-ui/icons/Timer';\nimport PanoramaFishEyeIcon from '@material-ui/icons/PanoramaFishEye';\nimport orange from '@material-ui/core/colors/orange';\nimport red from '@material-ui/core/colors/red';\nimport green from '@material-ui/core/colors/green';\nimport indigo from '@material-ui/core/colors/indigo';\nimport SelectDifficultyModal from './organisms/SelectDifficultyModal';\nimport CompleteModal from './organisms/CompleteModal';\n\nconst App = () => {\n  const PLUS_OPERATOR = 'PLUS';\n  const MINUS_OPERATOR = 'MINUS';\n  const DIFFCULTY_EASY = '初級';\n  const DIFFCULTY_NORMAL = '中級';\n  const DIFFCULTY_HARD = '上級';\n\n  const answerButtonColor = [orange[800], red[500], green[600], indigo[500]];\n\n  const [countDowntime, updateCountDownTime] = useState(30);\n  const [timerId, setTimerId] = useState(0);\n  const [diffculty, setDiffculty] = useState(DIFFCULTY_EASY);\n  const [partsCount, setPartsCount] = useState(1);\n  const [buttonFormulaData, setButtonFormulaData] = useState([]);\n  const [correctAnswerIndex, setCorrectAnswerIndex] = useState(null);\n  const [answerCount, updateAnswerCount] = useState(0);\n  const [correctAnswerCount, updateCorrectAnswerCount] = useState(0);\n  const [difficultyModalOpen, updateDifficultyModalOpen] = useState(true);\n  const [displayAnswer, updateDisplayAnswer] = useState(false);\n  const [lastAnswerCorrect, updateLastAnswerCorrect] = useState(false);\n  const [completeModalOpen, updateCompleteModalOpen] = useState(false);\n\n  const startTimer = () => {\n    setTimerId(\n      setInterval(() => {\n        updateCountDownTime((time) => time - 1);\n      }, 1000)\n    );\n  };\n  const stopTimer = () => {\n    clearInterval(timerId);\n  };\n\n  const getRandomInt = (count, initNum = 0) => {\n    return Math.floor(Math.random() * Math.floor(count) + initNum);\n  };\n\n  const getPartsOfFormula = () => {\n    let operator;\n    if (getRandomInt(100, 1) % 2 === 0) {\n      operator = PLUS_OPERATOR;\n    } else {\n      operator = MINUS_OPERATOR;\n    }\n    const num = getRandomInt(199, -99);\n    const parts = {\n      operator,\n      num,\n    };\n    return parts;\n  };\n\n  const getFormulaData = (addPartsCount) => {\n    let num = getRandomInt(100);\n    let formula = String(num);\n\n    for (let count = 1; count <= addPartsCount; count += 1) {\n      const parts = getPartsOfFormula();\n      if (parts.operator === PLUS_OPERATOR) {\n        num += parts.num;\n        formula += parts.num < 0 ? ` + (${parts.num})` : ` + ${parts.num}`;\n      } else if (parts.operator === MINUS_OPERATOR) {\n        num -= parts.num;\n        formula += parts.num < 0 ? ` - (${parts.num})` : ` - ${parts.num}`;\n      } else {\n        console.log('error');\n      }\n    }\n    const abs = Math.abs(num - 2);\n\n    const formulaData = {\n      num,\n      formula,\n      abs,\n    };\n    return formulaData;\n  };\n\n  // 正答が複数存在しうるかチェック\n  const isDuplicationAbs = (formulaDataList) => {\n    const absList = formulaDataList.map((data) => {\n      return data.abs;\n    });\n    return (\n      Array.from(new Set(absList)).length < process.env.REACT_APP_BUTTON_COUNT\n    );\n  };\n\n  const initialCorrectAnswerIndex = (formulaDataList) => {\n    const absList = formulaDataList.map((data, index) => {\n      return {\n        originalIndex: index,\n        abs: data.abs,\n      };\n    });\n    absList.sort((a, b) => {\n      if (a.abs < b.abs) {\n        return -1;\n      }\n      return 1;\n    });\n    setCorrectAnswerIndex(absList[0].originalIndex);\n  };\n\n  const initialFormulaData = () => {\n    const addPartsCount = partsCount - 1;\n    let formulaDataList;\n\n    // 正答が複数存在するパターンの場合は、再度初期化しなおし。\n    do {\n      formulaDataList = [];\n      for (\n        let count = 1;\n        count <= process.env.REACT_APP_BUTTON_COUNT;\n        count += 1\n      ) {\n        formulaDataList.push(getFormulaData(addPartsCount));\n      }\n    } while (isDuplicationAbs(formulaDataList));\n    initialCorrectAnswerIndex(formulaDataList);\n    setButtonFormulaData(formulaDataList);\n  };\n\n  const initialDiffcultySetting = (selectDiffculty) => {\n    setDiffculty(selectDiffculty);\n    switch (selectDiffculty) {\n      case DIFFCULTY_EASY:\n        setPartsCount(process.env.REACT_APP_EASY_FORMULA_PARTS_COUNT);\n        break;\n      case DIFFCULTY_NORMAL:\n        setPartsCount(process.env.REACT_APP_NORMAL_FORMULA_PARTS_COUNT);\n        break;\n      case DIFFCULTY_HARD:\n        setPartsCount(process.env.REACT_APP_HARD_FORMULA_PARTS_COUNT);\n        break;\n      default:\n        console.log('error');\n    }\n  };\n\n  const checkAnswer = (index) => {\n    if (index === correctAnswerIndex) {\n      updateCorrectAnswerCount((count) => count + 1);\n      updateLastAnswerCorrect(true);\n    } else {\n      updateLastAnswerCorrect(false);\n    }\n  };\n\n  useEffect(() => {\n    initialFormulaData();\n    // TODO: react-hooks/exhaustive-depsルールを一時的に無効化\n    // eslint-disable-next-line\n  }, [partsCount, answerCount]);\n\n  useEffect(() => {\n    if (countDowntime === 0) {\n      stopTimer();\n      updateCompleteModalOpen(true);\n    }\n    // TODO: react-hooks/exhaustive-depsルールを一時的に無効化\n    // eslint-disable-next-line\n  }, [countDowntime]);\n\n  const handleSelectDifficultyAction = (selectDiffculty) => {\n    initialDiffcultySetting(selectDiffculty);\n    updateDifficultyModalOpen(false);\n    startTimer();\n  };\n\n  const handleAnswerAction = (index) => {\n    checkAnswer(index);\n    updateDisplayAnswer(true);\n    setTimeout(() => {\n      updateDisplayAnswer(false);\n      updateAnswerCount((count) => count + 1);\n    }, 1200);\n  };\n\n  const handleRestartAction = () => {\n    updateCompleteModalOpen(false);\n    updateCountDownTime(30);\n    updateCorrectAnswerCount(0);\n    updateDifficultyModalOpen(true);\n  };\n\n  return (\n    <>\n      <Container maxWidth=\"sm\">\n        <Box\n          p={4}\n          my={1}\n          boxShadow={3}\n          borderRadius={16}\n          display=\"flex\"\n          flexDirection=\"column\"\n          alignItems=\"center\"\n        >\n          <Box display=\"flex\">\n            <Box m={2} fontSize=\"1.8rem\">\n              <TimerIcon style={{ paddingRight: '5px' }} />\n              <>{countDowntime}</>\n            </Box>\n            <Box m={2} fontSize=\"1.8rem\">\n              <PanoramaFishEyeIcon />\n              <>{`：${correctAnswerCount}`}</>\n            </Box>\n          </Box>\n          <Typography>\n            {displayAnswer && lastAnswerCorrect && '正解！'}\n            {displayAnswer && !lastAnswerCorrect && '不正解...'}\n            {!displayAnswer && '一番「2」に近い式はどれかな？'}\n          </Typography>\n          {buttonFormulaData.map((data, index) => {\n            return (\n              <Box p={2} key={data.formula}>\n                <Button\n                  variant=\"contained\"\n                  style={{\n                    width: '250px',\n                    color: 'white',\n                    backgroundColor: answerButtonColor[index],\n                  }}\n                  onClick={() => handleAnswerAction(index)}\n                >\n                  {data.formula}\n                </Button>\n                <Box height={20}>\n                  {displayAnswer && (\n                    <Typography align=\"center\">\n                      {`${data.num} → 2まで${data.abs} ${\n                        index === correctAnswerIndex ? '〇' : '×'\n                      }`}\n                    </Typography>\n                  )}\n                </Box>\n              </Box>\n            );\n          })}\n        </Box>\n      </Container>\n      <SelectDifficultyModal\n        open={difficultyModalOpen}\n        handleSelectDifficultyAction={handleSelectDifficultyAction}\n      />\n      <CompleteModal\n        open={completeModalOpen}\n        diffculty={diffculty}\n        correctAnswerCount={correctAnswerCount}\n        handleRestartAction={handleRestartAction}\n      />\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById('root');\nif (rootElement.hasChildNodes()) {\n  hydrate(<App />, rootElement);\n} else {\n  render(<App />, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}